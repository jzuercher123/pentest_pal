import openai

openai.api_key = 'YOUR_API_KEY'

def analyze_code(code_snippet):
    prompt = f"Analyze the following code for security vulnerabilities:\n\n{code_snippet}\n\nProvide a detailed report of any potential issues found."
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "You are a cybersecurity expert specializing in code analysis."},
            {"role": "user", "content": prompt}
        ],
        max_tokens=500,
        temperature=0
    )
    return response['choices'][0]['message']['content']

def generate_test_inputs(vulnerability_type):
    prompt = f"Generate test inputs to check for {vulnerability_type} vulnerabilities in web applications."
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "You are an expert in generating test inputs for security testing."},
            {"role": "user", "content": prompt}
        ],
        max_tokens=150,
        temperature=0.7
    )
    return response['choices'][0]['message']['content']

def generate_report(findings):
    prompt = f"Summarize the following security findings in a professional report:\n\n{findings}"
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "You are a technical writer skilled in creating security reports."},
            {"role": "user", "content": prompt}
        ],
        max_tokens=300,
        temperature=0
    )
    return response['choices'][0]['message']['content']


if __name__ == '__main__':
    code_snippet = """
    def insecure_function(user_input):
        command = f"echo {user_input}"
        os.system(command)
    """
    vulnerabilities_report = analyze_code(code_snippet)
    print(vulnerabilities_report)

    vulnerability_type = "SQL injection"
    test_inputs = generate_test_inputs(vulnerability_type)
    print(test_inputs)

    findings = "The application is vulnerable to SQL injection attacks due to lack of input validation."
    security_report = generate_report(findings)
    print(security_report)
